import heapq

# Goal state
goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

# Movements: (row, col)
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right


def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance


def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j


def state_to_tuple(state):
    return tuple(tuple(row) for row in state)


def neighbors(state):
    zero_x, zero_y = find_zero(state)
    result = []
    for move_x, move_y in moves:
        new_x, new_y = zero_x + move_x, zero_y + move_y
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[zero_x][zero_y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[zero_x][zero_y]
            result.append(new_state)
    return result


def a_star(start_state):
    open_set = []
    heapq.heappush(open_set, (manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while open_set:
        est_total, cost, current_state, path = heapq.heappop(open_set)

        if current_state == goal_state:
            return path + [current_state]

        state_tuple = state_to_tuple(current_state)
        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        for neighbor in neighbors(current_state):
            neighbor_tuple = state_to_tuple(neighbor)
            if neighbor_tuple not in visited:
                heapq.heappush(open_set, (
                    cost + 1 + manhattan_distance(neighbor),
                    cost + 1,
                    neighbor,
                    path + [current_state]
                ))
    return None


def print_solution(solution):
    if not solution:
        print("No solution found.")
        return
    for step, state in enumerate(solution):
        print(f"Step {step}:")
        for row in state:
            print(row)
        print()


# Example initial state
initial_state = [
    [1, 2, 3],
    [4, 6, 8],
    [7, 0, 5]
]

solution = a_star(initial_state)
print_solution(solution)
